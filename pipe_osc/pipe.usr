c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      if(mod(istep,1).eq.0) call hpts()

      ifxyo = .true. 
      if (iostep.gt.0.and.istep.gt.iostep) ifxyo = .false. 

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      eps   = 0.1
      omega = 1.0

      xp  = x/0.5
      yp  = y/0.5
      rr  = xp*xp + yp*yp

      ux  = 0.0
      uy  = 0.0
      uz  = 1 - rr   ! Hagen-Poiseiulle flow, pipe diamter = 1.
      uz  = uz * (1.0 + eps * sin(omega * time))
      temp= 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      xp  = x/0.5
      yp  = y/0.5
      rr  = xp*xp + yp*yp

      ux  = 0.0
      uy  = 0.0
      uz  = 1 - rr   ! Hagen-Poiseiulle flow, pipe diamter = 1.
      temp= 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2  !  Modify geometry 

      include 'SIZE'
      include 'TOTAL'

      x0 = -0.5
      x1 =  0.5
      call rescale_x (xm1,x0,x1)  ! Rescale x & y so pipe diameter is 1.
      call rescale_x (ym1,x0,x1)

      return
      end
c-----------------------------------------------------------------------
