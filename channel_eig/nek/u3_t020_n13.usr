c-----------------------------------------------------------------------
c
c     This usr file originated from the Orr-Sommerfeld study presented
c     in the Overlapping Schwarz paper [P.F. Fischer, JCP 133 1997].
c
c     Here it's modified to take either re7000 or re7500 eigenfunction
c     input generated by the author's OS code.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
      include 'SIZE'   
C     include 'TSTEP'  
      include 'TOTAL'  
      include 'NEKUSE' 

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,iel)
      include 'SIZE'   
      include 'TSTEP'  
      include 'INPUT'  
      include 'NEKUSE' 

      visc=param(2)
      ffx = 0.0*visc
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,iel)
      include 'SIZE'   
      include 'TOTAL'  
      include 'NEKUSE' 

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,iel)
      return
      end   
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,iel)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real    vxin(lx1,ly1,lz1,lelt), vyin(lx1,ly1,lz1,lelt)
      common/rarpack/vxin,vyin
      integer iarpack_mode
      common/iarpack/iarpack_mode

      integer icalld
      save    icalld
      data    icalld/0/

c     Base flow
      if(jp.eq.0)then
         ux = (1.0-y**2)  ! Add base flow (or not)
         uy = 0.0
         return
      endif

c     First time read velocity from file
      if (icalld.eq.0) then

         icalld= 1
         ntot1 = nx1*ny1*nz1*nelt
         ifid  = 50
         open(ifid,file='veci.dat',status='old')
         read(ifid,*) iarpack_mode, nin, nvecs
         if(nin.ne.ntot1)then
            write(6,*) 'Vector size dont match'
            call exitt()
         endif
         read(ifid,*)(vxin(i,1,1,1),i=1,ntot1)
         read(ifid,*)(vyin(i,1,1,1),i=1,ntot1)
         close(ifid)

      endif

      ie = gllel(iel)
      ux = vxin(ix,iy,iz,ie)
      uy = vyin(ix,iy,iz,ie)

      return
      end   
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      x0 = 0
      x1 = 2*pi
      call rescale_x(xm1,x0,x1) ! Make certain coordinates are on [0,2pi]

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'  
      include 'TOTAL' 
      integer iarpack_mode
      common/iarpack/iarpack_mode
c
      integer icalld
      save    icalld
      data    icalld/0/

      n=nx1*ny1*nz1*nelv

c     do i=1,n
c        y = ym1(i,1,1,1)
c        ux(i) = 1-y*y
c        uy(i) = 0
c        vx(i,1,1,1) = vxp(i,1)
c        vy(i,1,1,1) = vyp(i,1)
c        vz(i,1,1,1) = 0.0
c     enddo
c     call outpost(ux,uy,vz,pr,t,'   ')  ! base field
c     call outpost(vx,vy,vz,pr,t,'   ')  ! perturbation field
c     call exitti ('quit userchk to dump perturbation field',nelv)

c     Read vectors and save them to file
      if(iarpack_mode.eq.4)then
c        save base solution
         ifxyo = .true.
         call outpost(vx,vy,vz,pr,t,'   ')  ! perturbation field
         ifxyo = .false.
c        save eigenvectors
         ifid  = 50
         open(ifid,file='veci.dat',status='old')
         read(ifid,*) iarpack_mode, nin, nvecs
         if(nin.ne.n)then
            write(6,*) 'Vector size dont match'
            call exitt()
         endif
         do j=1,nvecs
            read(ifid,*)(vx(i,1,1,1),i=1,n)
            read(ifid,*)(vy(i,1,1,1),i=1,n)
            call outpost(vx,vy,vz,pr,t,'   ')  ! perturbation field
         enddo
         close(ifid)
         call exitt()
      endif

c     Make velocity continuous
      if(istep.eq.0)then
         call opdssum(vxp,vyp,vzp)
         call opcolv(vxp,vyp,vzp,vmult)
      endif

c     Multiply with mass matrix and exit
      if(iarpack_mode.eq.1)then
         call col3(vx, bm1, v1mask, n)
         call col3(vy, bm1, v2mask, n)
         call col2(vxp, vx, n)
         call col2(vyp, vx, n)
         call to_arpack()
      endif

c     Time stepping has finished
      if(istep.eq.param(11))then
         if(iarpack_mode.eq.2)then
c           Multiply by mass matrix
            call col3(vx, bm1, v1mask, n)
            call col3(vy, bm1, v2mask, n)
            call col2(vxp, vx, n)
            call col2(vyp, vx, n)
            call to_arpack()
         else if(iarpack_mode.eq.3)then
            call to_arpack()
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine to_arpack()
      include 'SIZE'  
      include 'TOTAL' 

      ntot1= nx1*ny1*nz1*nelt
      ifid = 50
      open(ifid, file='veco.dat')
      write(ifid,*)(vxp(i,1),i=1,ntot1)
      write(ifid,*)(vyp(i,1),i=1,ntot1)
      close(ifid)
      call exitt()

      return
      end
